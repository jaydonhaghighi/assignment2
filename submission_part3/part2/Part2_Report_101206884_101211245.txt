Report Part D:
During multiple runs, no deadlock or livelock was observed. 
The processes executed smoothly, with each TA accessing the database and marking students in a fair 
and alternating manner. Deadlock was avoided because semaphores were released if both could not be acquired, 
allowing other processes to proceed. Livelock was also avoided due to the retry mechanism with delays, 
which prevented processes from endlessly contending for the same resources. The execution order was generally 
round-robin, with TAs taking turns marking students. However, due to the random delays introduced during 
database access and marking, the order of execution varied slightly between runs, but all TAs completed marking 
the student list three times as expected.

Report Part E:
The updated program ensures both deadlock-free and livelock-free execution. Deadlock is avoided by acquiring 
semaphores in a consistent global order, which prevents circular wait conditions. Livelock is avoided as 
processes make progress without indefinite retries or contention. During execution, the processes access the 
database and mark students in an alternating, fair manner. The random delays introduced variability in the 
order of execution, but all TAs completed marking the student list three times without blocking or contention. 
This approach ensures safe and efficient coordination among the processes.

Discussion of design and solution of critical section problem:
The code is designed to simulate a concurrent system where multiple TAs mark student assignments. 
Each TA operates in its own process and accesses a shared memory structure to fetch and mark students' assignments. 
To prevent race conditions and ensure proper synchronization, the code employs POSIX semaphores, one for each TA, 
to control access to the shared critical resourceâ€”the current_index field in the shared memory. 
Each TA logs its progress to a unique file, ensuring that no log file contention occurs.

The solution adheres to the three key requirements of the critical section problem:
- Mutual Exclusion: The semaphores ensure that only one TA process can access and modify the current_index
in shared memory at a time. Each TA must acquire its semaphore and the next one in a fixed order to ensure 
that no two TAs simultaneously access the shared data.

- Progress: The design ensures that if no TA is accessing the critical section, other TAs waiting to enter will eventually proceed. 
Semaphores are released after each access, allowing other TAs to continue marking assignments without indefinite blocking.

- Bounded Waiting: Each TA process will only wait for a bounded amount of time to access the critical section. The semaphore 
mechanism ensures that no TA process can indefinitely block another from accessing the shared resource, as each TA follows a 
structured cycle of acquiring and releasing semaphores (prevent starvation).